"use strict";
var express = require("express");
var Product = require("../model/product");
var ProductsModel = require("../model/products");
var Products = (function () {
    function Products() {
        this.productList = new ProductsModel.Products([
            new Product.Product(1, 'ABC', 1),
            new Product.Product(2, 'DEF', 12),
            new Product.Product(3, 'GHI')
        ]);
    }
    Products.routes = function () {
        var router = express.Router();
        var productsRoute = new Products();
        router.get('/products/', productsRoute.index.bind(productsRoute));
        router.post('/products/', productsRoute.create.bind(productsRoute));
        router.put('/products/:product_id', productsRoute.update.bind(productsRoute));
        router.delete('/products/:product_id', productsRoute.delete.bind(productsRoute));
        router.get('/products/:product', productsRoute.find.bind(productsRoute));
        router.post('/products/delete/:product_id', productsRoute.delete.bind(productsRoute));
        router.post('/products/update/:product_id', productsRoute.update.bind(productsRoute));
        return router;
    };
    Products.prototype.index = function (request, response) {
        response.json(this.productList.list());
    };
    Products.prototype.create = function (request, response) {
        var productName = request.body.product_name;
        var productQuantity = parseInt(request.body.quantity) || 0;
        if (!productName) {
            response.status(500).send('Product name not found');
            return;
        }
        response.json(this.productList.add(productName, productQuantity));
    };
    Products.prototype.update = function (request, response) {
        var productId = parseInt(request.params.product_id);
        var product = this.productList.fetch(productId);
        var productName = request.body.product_name;
        var productQuantity = request.body.quantity;
        if (!product) {
            response.status(404).send('Product not found');
            return;
        }
        if (productName !== undefined) {
            product.setName(productName);
        }
        if (productQuantity !== undefined) {
            product.updateQuantity(productQuantity);
        }
        response.json(product);
    };
    Products.prototype.delete = function (request, response) {
        var productId = parseInt(request.params.product_id);
        var wasDeleted = this.productList.delete(productId);
        if (!wasDeleted) {
            response.status(404).send('Product not found');
            return;
        }
        else {
            response.json({ success: true });
        }
    };
    Products.prototype.find = function (request, response) {
        var productQuery = request.params.product;
        var product = this.productList.find(productQuery);
        if (!product) {
            response.status(404).send('Product not found');
            return;
        }
        response.json(product);
    };
    return Products;
}());
exports.Products = Products;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
